///////// Область видимости
// let a
// let b

// function myFin() {
//   let b
//   a = true
//   b = 10
//   console.log(b); // локальная область видимости и здесь мы получим 10 в консоле
// }

// myFin()

// console.log(b); // здесь глобальная область видимости и мы получим undefined



// const printName = 'Bob'

// function firstScope() {
//   function secondScope() {
//     console.log(printName);
//   }
//   secondScope()
// }

// firstScope()



// let a // глобальная область видимости
// let b

// function myFin() { ///область видимости функции
//   let b
//   a = true
//   b = 10
//   console.log(b);
// }

// myFin()

// console.log(a); // будет true потому что когда мы доходим до присвоения переменной a значения true мы в локальной области видимости функции не находим переменную a и поэтому мы идем в глобальную область видимости потому как функция наша вызвана там и находим нашу переменную a и задаем ей значение true,теперь наша функция завершается и в консоле выйдет true


// console.log(b); /// будет undefined потому что она объявлена в глобавльной области видимости а в глобальной области видимости она undefined,и так как глобальная область видимости выше локальной она перезапищет на глобальную область видимости в которой b undefined


/// В функциях лучше не менять глобальные пременные как в примере с a,поэтому лучше в фукнциях(локальных областяъ видимости)  создавать новые переменные и работать с ними


/// Пример плохого кода

// function myFn() {
//   a = true
//   console.log(a);
// }

// myFn()

// console.log(a);

/// в данном примере в области видимости функции мы присвоили a значение true но не обьявили a через переменную,ошибки не будет но лучше так не писать и в данном случае a будет объявлена в глобавльной области видимости
